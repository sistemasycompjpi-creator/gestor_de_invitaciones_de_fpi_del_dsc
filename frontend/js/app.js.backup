// Estado global de la aplicación
let invitadosData = [];
let filtroActual = "todos";
let paginaActual = "lista";

// Configuración de reintentos
const MAX_RETRIES = 5;
const RETRY_DELAY = 1000;
const API_URL = "http://127.0.0.1:5000/api/invitados";

// Inicialización cuando el DOM está listo
window.addEventListener("DOMContentLoaded", () => {
  configurarNavegacion();
  cargarInvitados();
  configurarFormulario();
  configurarFiltros();
  actualizarEstadisticas();
});

// ========== SISTEMA DE NAVEGACIÓN ==========

function configurarNavegacion() {
  const navItems = document.querySelectorAll(".nav-item");

  navItems.forEach((item) => {
    item.addEventListener("click", () => {
      const pagina = item.dataset.page;
      cambiarPagina(pagina);

      // Actualizar navegación activa
      navItems.forEach((nav) => nav.classList.remove("active"));
      item.classList.add("active");
    });
  });
}

function cambiarPagina(nombrePagina) {
  // Ocultar todas las páginas
  const todasLasPaginas = document.querySelectorAll(".page");
  todasLasPaginas.forEach((pagina) => {
    pagina.classList.remove("active");
  });

  // Mostrar la página seleccionada
  const paginaSeleccionada = document.getElementById(`page-${nombrePagina}`);
  if (paginaSeleccionada) {
    paginaSeleccionada.classList.add("active");
    paginaActual = nombrePagina;

    // Actualizar datos si es necesario
    if (nombrePagina === "lista") {
      mostrarInvitados(invitadosData);
    } else if (nombrePagina === "estadisticas") {
      actualizarEstadisticas();
    }
  }
}

// ========== FUNCIONES DE CARGA DE DATOS ==========

function cargarInvitados(retryCount = 0) {
  const listaContainer = document.getElementById("lista-invitados");

  fetch(API_URL)
    .then((response) => {
      if (!response.ok) {
        throw new Error(
          "La respuesta de la red no fue exitosa. Código: " + response.status
        );
      }
      return response.json();
    })
    .then((invitados) => {
      invitadosData = invitados;
      mostrarInvitados(invitados);
      actualizarContador();
      actualizarEstadisticas();
    })
    .catch((error) => {
      console.error("Error al obtener los invitados:", error);

      // Reintentar automáticamente
      if (retryCount < MAX_RETRIES) {
        const nextRetry = retryCount + 1;
        console.log(`Reintentando conexión... (${nextRetry}/${MAX_RETRIES})`);
        listaContainer.innerHTML = `
          <div class="loading">
            Conectando al servidor... (intento ${nextRetry}/${MAX_RETRIES})
          </div>
        `;

        setTimeout(() => {
          cargarInvitados(nextRetry);
        }, RETRY_DELAY);
        return;
      }

      // Mostrar error con botón de recarga
      mostrarError(error);
    });
}

function mostrarError(error) {
  const listaContainer = document.getElementById("lista-invitados");
  let message = `Error al cargar los datos: ${error.message}`;

  if (
    error.message.includes("Failed to fetch") ||
    error.message.includes("NetworkError")
  ) {
    message +=
      " — No se pudo conectar al servidor. El backend Flask puede estar iniciándose.";
  }

  listaContainer.innerHTML = `
    <div class="error-container">
      <p class="error-message">❌ ${message}</p>
      <button id="btn-recargar" class="btn btn-secondary">
        🔄 Recargar Datos
      </button>
    </div>
  `;

  document.getElementById("btn-recargar")?.addEventListener("click", () => {
    listaContainer.innerHTML = '<div class="loading">Cargando...</div>';
    cargarInvitados(0);
  });
}

// ========== FUNCIONES DE VISUALIZACIÓN ==========

function mostrarInvitados(invitados) {
  const listaContainer = document.getElementById("lista-invitados");

  // Filtrar según el filtro activo
  const invitadosFiltrados = filtrarInvitados(invitados);

  if (invitadosFiltrados.length === 0) {
    listaContainer.innerHTML = `
      <div class="empty-state">
        <p>📭 No hay invitados que coincidan con el filtro seleccionado.</p>
      </div>
    `;
    return;
  }

  listaContainer.innerHTML = "";

  invitadosFiltrados.forEach((invitado) => {
    const card = crearCardInvitado(invitado);
    listaContainer.appendChild(card);
  });

  actualizarContador(invitadosFiltrados.length);
}

function crearCardInvitado(invitado) {
  const card = document.createElement("div");
  card.className = "invitado-card";
  card.dataset.id = invitado.id;

  // Nombre y roles
  let rolesHTML = "";
  if (invitado.es_asesor_t1) {
    rolesHTML += '<span class="badge badge-t1">👨‍🏫 Asesor T1</span>';
  }
  if (invitado.es_asesor_t2) {
    rolesHTML += '<span class="badge badge-t2">👩‍🏫 Asesor T2</span>';
  }
  if (invitado.puede_ser_jurado_protocolo) {
    rolesHTML +=
      '<span class="badge badge-protocolo">📝 Jurado Protocolo</span>';
  }
  if (invitado.puede_ser_jurado_informe) {
    rolesHTML += '<span class="badge badge-informe">📄 Jurado Informe</span>';
  }

  // Cargos y organizaciones - cada uno en su propia línea
  let puestosHTML = "";
  if (invitado.puestos && invitado.puestos.length > 0) {
    invitado.puestos.forEach((puesto) => {
      if (puesto.cargo || puesto.organizacion) {
        puestosHTML += `
          <div class="puesto-line">
            <span class="cargo">💼 ${puesto.cargo || "N/A"}</span>
            <span class="organizacion"> - ${puesto.organizacion || "N/A"}</span>
          </div>
        `;
      }
    });
  }

  // Nota opcional
  let notaHTML = "";
  if (invitado.nota && invitado.nota.trim() !== "") {
    notaHTML = `<span class="nota-invitado">${invitado.nota}</span>`;
  }

  card.innerHTML = `
    <div class="card-content">
      <div class="card-line-1">
        <div class="card-line-1-left">
          <h3 class="nombre">${invitado.nombre_completo}</h3>
          <div class="roles">
            ${
              rolesHTML ||
              '<span class="badge badge-default">Sin roles asignados</span>'
            }
          </div>
        </div>
        <span class="id-badge">ID: ${invitado.id}</span>
      </div>
      ${puestosHTML}
      <div class="caracter-line">
        <div class="caracter-invitacion">${
          invitado.caracter_invitacion || "Sin especificar"
        }</div>
      </div>
      <div class="actions-line">
        <div class="actions-line-left">
          ${notaHTML}
        </div>
        <div class="actions-line-right">
          <button class="btn-edit" onclick="editarInvitado(${invitado.id})">
            ✏️ Editar
          </button>
          <button class="btn-delete" onclick="eliminarInvitado(${invitado.id})">
            🗑️ Eliminar
          </button>
        </div>
      </div>
    </div>
  `;

  return card;
}

// ========== FUNCIONES DE FILTRADO ==========

function filtrarInvitados(invitados) {
  switch (filtroActual) {
    case "asesor_t1":
      return invitados.filter((inv) => inv.es_asesor_t1);
    case "asesor_t2":
      return invitados.filter((inv) => inv.es_asesor_t2);
    case "jurado_protocolo":
      return invitados.filter((inv) => inv.puede_ser_jurado_protocolo);
    case "jurado_informe":
      return invitados.filter((inv) => inv.puede_ser_jurado_informe);
    case "todos":
    default:
      return invitados;
  }
}

function configurarFiltros() {
  const botonesFiltro = document.querySelectorAll(".btn-filter");

  botonesFiltro.forEach((boton) => {
    boton.addEventListener("click", () => {
      // Actualizar estado activo
      botonesFiltro.forEach((b) => b.classList.remove("active"));
      boton.classList.add("active");

      // Aplicar filtro
      filtroActual = boton.dataset.filter;
      mostrarInvitados(invitadosData);
    });
  });
}

function actualizarContador(cantidad = null) {
  const contador = document.getElementById("contador-filtro");
  const count = cantidad !== null ? cantidad : invitadosData.length;
  contador.textContent = `Total: ${count} invitado${count !== 1 ? "s" : ""}`;
}

// ========== FUNCIONES DEL FORMULARIO ==========

function configurarFormulario() {
  const form = document.getElementById("form-invitado");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const data = {};

    // Obtener todos los campos
    formData.forEach((value, key) => {
      if (key.startsWith("es_asesor_")) {
        data[key] = true; // Checkbox marcado
      } else {
        data[key] = value.trim() || null;
      }
    });

    // Asegurar que los checkboxes no marcados sean false
    data.es_asesor_t1 = formData.has("es_asesor_t1");
    data.es_asesor_t2 = formData.has("es_asesor_t2");

    // Verificar si estamos en modo edición
    const submitBtn = form.querySelector('button[type="submit"]');
    const isEditMode = submitBtn.dataset.editMode === "true";

    if (isEditMode && invitadoEnEdicion) {
      // Actualizar invitado existente
      await actualizarInvitado(invitadoEnEdicion.id, data);
      form.reset();
      return;
    }

    // Crear nuevo invitado
    try {
      const response = await fetch(API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error("Error al crear el invitado");
      }

      const nuevoInvitado = await response.json();
      console.log("Invitado creado:", nuevoInvitado);

      // Limpiar formulario
      form.reset();

      // Recargar lista
      await cargarInvitados();

      // Actualizar estadísticas
      actualizarEstadisticas();

      // Mostrar modal de éxito con redirección
      mostrarModal(
        "¡Invitado Agregado!",
        "El invitado se ha registrado correctamente. Redirigiendo a la lista de invitados...",
        "✅",
        () => {
          cambiarPagina("lista");
          document.querySelector('[data-page="lista"]').classList.add("active");
          document
            .querySelector('[data-page="agregar"]')
            .classList.remove("active");
        }
      );
    } catch (error) {
      console.error("Error al agregar invitado:", error);
      mostrarNotificacion(
        "❌ Error al agregar invitado: " + error.message,
        "error"
      );
    }
  });

  // Evento para limpiar modo edición al resetear el formulario
  form.addEventListener("reset", () => {
    invitadoEnEdicion = null;
    const submitBtn = form.querySelector('button[type="submit"]');
    submitBtn.textContent = "✅ Guardar Invitado";
    delete submitBtn.dataset.editMode;
  });
}

// ========== FUNCIÓN PARA ELIMINAR INVITADO ==========

async function eliminarInvitado(id) {
  if (!confirm("¿Estás seguro de que deseas eliminar este invitado?")) {
    return;
  }

  try {
    const response = await fetch(`${API_URL}/${id}`, {
      method: "DELETE",
    });

    if (!response.ok) {
      throw new Error("Error al eliminar el invitado");
    }

    console.log("Invitado eliminado:", id);

    // Recargar lista
    cargarInvitados();

    // Actualizar estadísticas
    actualizarEstadisticas();

    // Mostrar mensaje de éxito
    mostrarNotificacion("✅ Invitado eliminado correctamente", "success");
  } catch (error) {
    console.error("Error al eliminar invitado:", error);
    mostrarNotificacion(
      "❌ Error al eliminar invitado: " + error.message,
      "error"
    );
  }
}

// ========== ESTADÍSTICAS ==========

function actualizarEstadisticas() {
  if (invitadosData.length === 0) return;

  // Total de invitados
  document.getElementById("stat-total").textContent = invitadosData.length;

  // Asesores T1
  const t1Count = invitadosData.filter((inv) => inv.es_asesor_t1).length;
  document.getElementById("stat-t1").textContent = t1Count;

  // Asesores T2
  const t2Count = invitadosData.filter((inv) => inv.es_asesor_t2).length;
  document.getElementById("stat-t2").textContent = t2Count;

  // Jurados Protocolo
  const protocoloCount = invitadosData.filter(
    (inv) => inv.puede_ser_jurado_protocolo
  ).length;
  document.getElementById("stat-protocolo").textContent = protocoloCount;

  // Jurados Informe
  const informeCount = invitadosData.filter(
    (inv) => inv.puede_ser_jurado_informe
  ).length;
  document.getElementById("stat-informe").textContent = informeCount;

  // Ambos jurados (protocolo E informe)
  const ambosCount = invitadosData.filter(
    (inv) => inv.puede_ser_jurado_protocolo && inv.puede_ser_jurado_informe
  ).length;
  document.getElementById("stat-ambos").textContent = ambosCount;
}

// ========== SISTEMA DE MODAL ==========

function mostrarModal(titulo, mensaje, icono = "✅", callback = null) {
  const overlay = document.getElementById("modal-overlay");
  const modalIcon = document.getElementById("modal-icon");
  const modalTitle = document.getElementById("modal-title");
  const modalMessage = document.getElementById("modal-message");
  const btnOk = document.getElementById("modal-btn-ok");

  modalIcon.textContent = icono;
  modalTitle.textContent = titulo;
  modalMessage.textContent = mensaje;

  overlay.classList.add("show");

  // Manejador del botón OK
  const handleClick = () => {
    overlay.classList.remove("show");
    btnOk.removeEventListener("click", handleClick);
    if (callback) {
      setTimeout(callback, 300);
    }
  };

  btnOk.addEventListener("click", handleClick);

  // Cerrar con ESC
  const handleEsc = (e) => {
    if (e.key === "Escape") {
      overlay.classList.remove("show");
      document.removeEventListener("keydown", handleEsc);
      if (callback) {
        setTimeout(callback, 300);
      }
    }
  };
  document.addEventListener("keydown", handleEsc);
}

// ========== SISTEMA DE NOTIFICACIONES (Deprecado) ==========

function mostrarNotificacion(mensaje, tipo = "info") {
  // Crear notificación
  const notificacion = document.createElement("div");
  notificacion.className = `notificacion notificacion-${tipo}`;
  notificacion.textContent = mensaje;

  // Agregar al body
  document.body.appendChild(notificacion);

  // Animar entrada
  setTimeout(() => {
    notificacion.classList.add("show");
  }, 10);

  // Remover después de 3 segundos
  setTimeout(() => {
    notificacion.classList.remove("show");
    setTimeout(() => {
      notificacion.remove();
    }, 300);
  }, 3000);
}

// ========== FUNCIÓN PARA EDITAR INVITADO ==========

let invitadoEnEdicion = null;

async function editarInvitado(id) {
  try {
    // Obtener datos del invitado
    const invitado = invitadosData.find((inv) => inv.id === id);
    if (!invitado) {
      throw new Error("Invitado no encontrado");
    }

    // Guardar referencia del invitado en edición
    invitadoEnEdicion = invitado;

    // Cambiar a la página de agregar
    cambiarPagina("agregar");
    document.querySelector('[data-page="agregar"]').classList.add("active");
    document.querySelector('[data-page="lista"]').classList.remove("active");

    // Llenar formulario con datos del invitado
    const form = document.getElementById("form-invitado");

    // Nombre
    form.querySelector("#nombre_completo").value =
      invitado.nombre_completo || "";

    // Carácter de la invitación
    form.querySelector("#caracter_invitacion").value =
      invitado.caracter_invitacion || "";

    // Nota del invitado
    form.querySelector("#nota").value = invitado.nota || "";

    // Cargos y organizaciones
    if (invitado.puestos && invitado.puestos.length > 0) {
      invitado.puestos.forEach((puesto, index) => {
        const num = index + 1;
        const cargoInput = form.querySelector(`#cargo_${num}`);
        const orgInput = form.querySelector(`#organizacion_${num}`);

        if (cargoInput) cargoInput.value = puesto.cargo || "";
        if (orgInput) orgInput.value = puesto.organizacion || "";
      });
    }

    // Checkboxes de asesoría
    form.querySelector("#es_asesor_t1").checked =
      invitado.es_asesor_t1 || false;
    form.querySelector("#es_asesor_t2").checked =
      invitado.es_asesor_t2 || false;

    // Cambiar el texto del botón submit
    const submitBtn = form.querySelector('button[type="submit"]');
    submitBtn.textContent = "💾 Actualizar Invitado";
    submitBtn.dataset.editMode = "true";

    // Scroll al inicio
    window.scrollTo(0, 0);

    mostrarNotificacion(
      "📝 Editando invitado: " + invitado.nombre_completo,
      "info"
    );
  } catch (error) {
    console.error("Error al cargar invitado para editar:", error);
    mostrarNotificacion("❌ Error al cargar datos del invitado", "error");
  }
}

async function actualizarInvitado(id, data) {
  try {
    const response = await fetch(`${API_URL}/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      throw new Error("Error al actualizar el invitado");
    }

    const invitadoActualizado = await response.json();
    console.log("Invitado actualizado:", invitadoActualizado);

    // Recargar lista
    await cargarInvitados();

    // Actualizar estadísticas
    actualizarEstadisticas();

    // Limpiar modo edición
    invitadoEnEdicion = null;

    // Restaurar botón submit
    const form = document.getElementById("form-invitado");
    const submitBtn = form.querySelector('button[type="submit"]');
    submitBtn.textContent = "✅ Guardar Invitado";
    delete submitBtn.dataset.editMode;

    // Mostrar modal de éxito con redirección
    mostrarModal(
      "¡Invitado Actualizado!",
      "Los cambios se han guardado correctamente. Redirigiendo a la lista de invitados...",
      "✅",
      () => {
        cambiarPagina("lista");
        document.querySelector('[data-page="lista"]').classList.add("active");
        document
          .querySelector('[data-page="agregar"]')
          .classList.remove("active");
      }
    );
  } catch (error) {
    console.error("Error al actualizar invitado:", error);
    mostrarNotificacion(
      "❌ Error al actualizar invitado: " + error.message,
      "error"
    );
  }
}

// Hacer disponible globalmente para onclick
window.eliminarInvitado = eliminarInvitado;

// ========== PÁGINA DE INVITACIONES ==========

// Plantilla de la carta de invitación
const PLANTILLA_INVITACION = `{{ nombre_completo }}
{{ cargo_1 }}
{{ organizacion_1 }}

El Instituto Tecnológico de Morelia, a través del Departamento de Ingeniería en Sistemas y Computación, le extiende una cordial invitación a participar como {{ motivo_invitacion }} en la

Feria de Proyectos de Investigación Tecnológica de Pregrado de la Carrera de Ingeniería en Sistemas Computacionales 

{{ edicion_evento }}

cuyos objetivos son:
* difundir ante actores relevantes los trabajos de investigación de pregrado de la carrera de Ingeniería en Sistemas Computacionales (ISC) 

* propiciar en los alumnos el acercamiento a problemáticas científico-tecnológicas en diversos contextos en el ámbito de su especialidad, y a su solución 

* impulsar un semillero de proyectos científicos y tecnológicos que conduzcan a la obtención de grado por Titulación Integral por Proyecto de Investigación y a la participación en eventos nacionales o internacionales de ciencia, tecnología e innovación 

La FPiT se llevará a cabo el 

{{ fecha_evento }}, con el evento inaugural en la Sala Audiovisual 1 del Campus Principal (Edificio F). 

Me permito anexar convocatoria, programa general y croquis del evento. Favor de considerar protocolo de vestimenta semiformal. 

Esperamos contar con su valiosa participación y quedamos atentos a su respuesta; 

así como a cualquier duda o información adicional que se requiera. 

Morelia, Michoacán, {{ fecha_carta }}.

Atentamente,

{{ nombre_firmante }}
{{ cargo_firmante }}
Instituto Tecnológico de Morelia 

Favor de confirmar su participación mediante correo: 

sistemas.investigacion@morelia.tecnm.mx`;

// Estado de invitaciones
let invitacionesState = {
  archivos: {
    plantillaDoc: null,
    convocatoria: null,
    cronograma: null,
  },
  invitadosSeleccionados: [],
  zoomLevel: 100,
  previewIndex: 0,
};

// Inicializar página de invitaciones cuando se carga
function inicializarInvitaciones() {
  configurarSubidaArchivos();
  cargarInvitadosParaPreview();
  configurarControlesPreview();
  configurarGeneracion();
  configurarPeriodo();
}

// Configurar subida de archivos
function configurarSubidaArchivos() {
  const fileInputs = [
    {
      id: "file-plantilla-doc",
      status: "status-plantilla-doc",
      key: "plantillaDoc",
    },
    {
      id: "file-convocatoria",
      status: "status-convocatoria",
      key: "convocatoria",
    },
    { id: "file-cronograma", status: "status-cronograma", key: "cronograma" },
  ];

  fileInputs.forEach(({ id, status, key }) => {
    const input = document.getElementById(id);
    const statusEl = document.getElementById(status);

    if (!input || !statusEl) return;

    input.addEventListener("change", (e) => {
      const file = e.target.files[0];
      if (file) {
        statusEl.textContent = `✅ ${file.name}`;
        statusEl.classList.add("selected");

        // Guardar en estado
        invitacionesState.archivos[key] = file;
      } else {
        statusEl.textContent = "Sin seleccionar";
        statusEl.classList.remove("selected");
        invitacionesState.archivos[key] = null;
      }
    });
  });
}

// Cargar invitados para preview (usa todos los invitados de la BD)
async function cargarInvitadosParaPreview() {
  try {
    // Usar los invitados ya cargados o cargarlos si no existen
    if (invitadosData.length === 0) {
      await cargarInvitados();
    }

    // Establecer todos los invitados para preview
    invitacionesState.invitadosSeleccionados = [...invitadosData];
    actualizarPreview();
  } catch (error) {
    console.error("Error al cargar invitados para preview:", error);
  }
}

// Configurar periodo y actualizar folder name
function configurarPeriodo() {
  const anioInput = document.getElementById("periodo-anio");
  const periodoInput = document.getElementById("periodo-numero");

  // Establecer año actual por defecto
  if (anioInput) {
    const now = new Date();
    anioInput.value = now.getFullYear();
  }

  // Listener para actualizar folder name y preview
  const updateFolder = () => {
    actualizarFolderName();
    actualizarPreview();
  };
  if (anioInput) anioInput.addEventListener("change", updateFolder);
  if (periodoInput) periodoInput.addEventListener("change", updateFolder);

  // Actualizar inicialmente
  actualizarFolderName();
}

// Configurar controles de preview
function configurarControlesPreview() {
  const btnZoomIn = document.getElementById("btn-zoom-in");
  const btnZoomOut = document.getElementById("btn-zoom-out");
  const btnPrev = document.getElementById("btn-preview-prev");
  const btnNext = document.getElementById("btn-preview-next");

  // Configurar listeners de campos para actualizar preview
  const campos = ["edicion-evento", "fecha-evento", "fecha-carta"];
  campos.forEach((id) => {
    const input = document.getElementById(id);
    if (input) {
      input.addEventListener("change", () => actualizarPreview());
      input.addEventListener("input", () => actualizarPreview());
    }
  });

  if (btnZoomIn) {
    btnZoomIn.addEventListener("click", () => {
      invitacionesState.zoomLevel = Math.min(
        200,
        invitacionesState.zoomLevel + 10
      );
      actualizarZoom();
    });
  }

  if (btnZoomOut) {
    btnZoomOut.addEventListener("click", () => {
      invitacionesState.zoomLevel = Math.max(
        50,
        invitacionesState.zoomLevel - 10
      );
      actualizarZoom();
    });
  }

  if (btnPrev) {
    btnPrev.addEventListener("click", () => {
      if (invitacionesState.previewIndex > 0) {
        invitacionesState.previewIndex--;
        actualizarPreview();
      }
    });
  }

  if (btnNext) {
    btnNext.addEventListener("click", () => {
      if (
        invitacionesState.previewIndex <
        invitacionesState.invitadosSeleccionados.length - 1
      ) {
        invitacionesState.previewIndex++;
        actualizarPreview();
      }
    });
  }
}

function actualizarZoom() {
  const zoomLevelEl = document.getElementById("zoom-level");
  if (zoomLevelEl) {
    zoomLevelEl.textContent = `${invitacionesState.zoomLevel}%`;
  }
  // Aquí se aplicaría el zoom al preview real
}

function actualizarPreview() {
  const previewCounter = document.getElementById("preview-counter");
  const btnPrev = document.getElementById("btn-preview-prev");
  const btnNext = document.getElementById("btn-preview-next");
  const previewContent = document.getElementById("preview-content");

  const count = invitacionesState.invitadosSeleccionados.length;
  const index = invitacionesState.previewIndex;

  if (previewCounter) {
    previewCounter.textContent =
      count > 0 ? `Invitado ${index + 1} de ${count}` : "Cargando invitados...";
  }

  if (btnPrev) {
    btnPrev.disabled = index === 0 || count === 0;
  }

  if (btnNext) {
    btnNext.disabled = index >= count - 1 || count === 0;
  }

  // Generar preview con la plantilla
  if (previewContent && count > 0) {
    const invitado = invitacionesState.invitadosSeleccionados[index];
    const periodoAnio =
      document.getElementById("periodo-anio")?.value || "[año]";
    const periodoNumero =
      document.getElementById("periodo-numero")?.value || "[periodo]";
    const edicionEvento =
      document.getElementById("edicion-evento")?.value ||
      "[Edición del evento]";
    const fechaEvento =
      document.getElementById("fecha-evento")?.value || "[Fecha del evento]";
    const fechaCartaInput = document.getElementById("fecha-carta")?.value;

    // Formatear fecha de carta
    let fechaCarta = "[Fecha de la carta]";
    if (fechaCartaInput) {
      const date = new Date(fechaCartaInput + "T00:00:00");
      const opciones = { year: "numeric", month: "long", day: "numeric" };
      fechaCarta = date.toLocaleDateString("es-MX", opciones);
    }

    // Generar nombre de archivo según nomenclatura
    // {{año}}.{{periodo}}-FPiT-DOSSIER-{{Organización_1}}-{{Nombre_invitado}}
    const organizacion = invitado.organizacion_1 || "SIN_ORG";
    const nombreLimpio = invitado.nombre_completo.replace(/\s+/g, " ").trim();
    const nombreArchivo = `${periodoAnio}.${periodoNumero}-FPiT-DOSSIER-${organizacion}-${nombreLimpio}.pdf`;

    // Reemplazar variables en la plantilla
    let cartaGenerada = PLANTILLA_INVITACION.replace(
      "{{ nombre_completo }}",
      invitado.nombre_completo || ""
    )
      .replace("{{ cargo_1 }}", invitado.cargo_1 || "")
      .replace("{{ organizacion_1 }}", invitado.organizacion_1 || "")
      .replace(
        "{{ motivo_invitacion }}",
        invitado.caracter_invitacion || "[Motivo de invitación]"
      )
      .replace("{{ edicion_evento }}", edicionEvento)
      .replace("{{ fecha_evento }}", fechaEvento)
      .replace("{{ fecha_carta }}", fechaCarta)
      .replace("{{ nombre_firmante }}", "M. en C. Isaac Ayala Barajas")
      .replace(
        "{{ cargo_firmante }}",
        "Jefe del Departamento de Ingeniería en Sistemas Computacionales"
      );

    previewContent.innerHTML = `
      <div style="background: white; padding: 40px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); max-width: 600px; font-family: 'Times New Roman', serif; line-height: 1.8;">
        <div style="white-space: pre-wrap; font-size: 14px; text-align: justify;">
${cartaGenerada}
        </div>
        <div style="margin-top: 30px; padding-top: 20px; border-top: 2px solid var(--primary-blue); text-align: center; color: #666; font-size: 0.85rem; font-family: sans-serif;">
          <p><strong>📄 Vista Previa</strong></p>
          <p style="margin: 8px 0;">Página 1: Carta de invitación</p>
          <p style="margin: 8px 0;">Página 2: Convocatoria (PDF anexado)</p>
          <p style="margin: 8px 0;">Página 3+: Cronograma y Croquis (PDF anexado)</p>
          <hr style="margin: 15px 0; border: none; border-top: 1px solid #ddd;">
          <p style="margin: 8px 0;"><strong>📁 Nombre de archivo:</strong></p>
          <p style="font-family: monospace; font-size: 0.75rem; word-break: break-all; padding: 5px; background: #f5f5f5; border-radius: 4px;">${nombreArchivo}</p>
        </div>
      </div>
    `;
  }
}

// Configurar generación
function configurarGeneracion() {
  const btnGenerar = document.getElementById("btn-generar");

  if (btnGenerar) {
    btnGenerar.addEventListener("click", generarInvitaciones);
  }
}

function actualizarFolderName() {
  const folderNameEl = document.getElementById("folder-name-display");
  if (!folderNameEl) return;

  const anio = document.getElementById("periodo-anio")?.value;
  const periodo = document.getElementById("periodo-numero")?.value;

  if (anio && periodo) {
    folderNameEl.textContent = `${anio}.${periodo}-invitaciones`;
  } else {
    folderNameEl.textContent = "Configurar año y periodo primero";
  }
}

async function generarInvitaciones() {
  // Obtener valores de los campos
  const periodoAnio = document.getElementById("periodo-anio")?.value;
  const periodoNumero = document.getElementById("periodo-numero")?.value;
  const edicionEvento = document.getElementById("edicion-evento")?.value;
  const fechaEvento = document.getElementById("fecha-evento")?.value;
  const fechaCarta = document.getElementById("fecha-carta")?.value;

  // Validaciones
  if (!periodoAnio || !periodoNumero) {
    mostrarModal(
      "⚠️ Campos Incompletos",
      "Por favor configura el año y periodo.",
      "⚠️"
    );
    return;
  }

  if (!edicionEvento || !fechaEvento || !fechaCarta) {
    mostrarModal(
      "⚠️ Campos Incompletos",
      "Por favor completa todos los campos requeridos del evento.",
      "⚠️"
    );
    return;
  }

  if (invitacionesState.invitadosSeleccionados.length === 0) {
    mostrarModal(
      "⚠️ Sin Invitados",
      "No hay invitados registrados en la base de datos. Por favor agrega invitados primero.",
      "⚠️"
    );
    return;
  }

  if (!invitacionesState.archivos.plantillaDoc) {
    mostrarModal(
      "⚠️ Archivo Faltante",
      "Debes cargar el archivo de plantilla PDF base.",
      "⚠️"
    );
    return;
  }

  if (!invitacionesState.archivos.convocatoria) {
    mostrarModal(
      "⚠️ Archivo Faltante",
      "Debes cargar el PDF de convocatoria.",
      "⚠️"
    );
    return;
  }

  if (!invitacionesState.archivos.cronograma) {
    mostrarModal(
      "⚠️ Archivo Faltante",
      "Debes cargar el PDF de cronograma y croquis.",
      "⚠️"
    );
    return;
  }

  // Mostrar progreso
  const progressContainer = document.getElementById("progress-container");
  const progressFill = document.getElementById("progress-fill");
  const progressText = document.getElementById("progress-text");
  const btnGenerar = document.getElementById("btn-generar");

  if (progressContainer) progressContainer.style.display = "block";
  if (btnGenerar) btnGenerar.disabled = true;

  try {
    // Preparar datos para enviar al backend
    const formData = new FormData();

    // Agregar archivos PDF
    formData.append("plantilla_doc", invitacionesState.archivos.plantillaDoc);
    formData.append("convocatoria", invitacionesState.archivos.convocatoria);
    formData.append("cronograma", invitacionesState.archivos.cronograma);

    // Agregar configuración de periodo
    formData.append("periodo_anio", periodoAnio);
    formData.append("periodo_numero", periodoNumero);

    // Agregar datos del evento
    formData.append("edicion_evento", edicionEvento);
    formData.append("fecha_evento", fechaEvento);
    formData.append("fecha_carta", fechaCarta);

    // Datos del firmante (hardcoded en frontend, siempre el mismo)
    formData.append("nombre_firmante", "M. en C. Isaac Ayala Barajas");
    formData.append(
      "cargo_firmante",
      "Jefe del Departamento de Ingeniería en Sistemas Computacionales"
    );

    // Agregar plantilla de texto
    formData.append("plantilla_texto", PLANTILLA_INVITACION);

    // Agregar datos completos de invitados (TODOS los de la BD)
    formData.append(
      "invitados_data",
      JSON.stringify(invitacionesState.invitadosSeleccionados)
    );

    // Simular progreso (el backend real manejará esto)
    let progress = 0;
    const progressInterval = setInterval(() => {
      progress += 5;
      if (progress <= 90) {
        if (progressFill) progressFill.style.width = `${progress}%`;
        if (progressText)
          progressText.textContent = `Generando... ${progress}%`;
      }
    }, 200);

    // Llamar al backend (endpoint a implementar)
    const response = await fetch(
      "http://127.0.0.1:5000/api/invitaciones/generar",
      {
        method: "POST",
        body: formData,
      }
    );

    clearInterval(progressInterval);

    if (!response.ok) {
      throw new Error("Error al generar invitaciones");
    }

    const result = await response.json();

    // Completar progreso
    if (progressFill) progressFill.style.width = "100%";
    if (progressText) progressText.textContent = "Completado! 100%";

    // Mostrar resultado
    setTimeout(() => {
      mostrarModal(
        "✅ Invitaciones Generadas",
        `Se generaron exitosamente ${
          invitacionesState.invitadosSeleccionados.length
        } invitaciones.\n\nArchivos guardados en:\n${
          result.folder_path || "Desktop/invitaciones"
        }`,
        "✅",
        () => {
          // Limpiar formulario
          limpiarFormularioInvitaciones();
        }
      );
    }, 500);
  } catch (error) {
    console.error("Error al generar invitaciones:", error);
    mostrarModal(
      "❌ Error",
      `No se pudieron generar las invitaciones.\n\nNota: El backend aún no está implementado. Este es un preview del frontend.\n\nError: ${error.message}`,
      "❌"
    );
  } finally {
    if (progressContainer) {
      setTimeout(() => {
        progressContainer.style.display = "none";
        if (progressFill) progressFill.style.width = "0%";
        if (progressText) progressText.textContent = "Generando... 0%";
      }, 2000);
    }
    if (btnGenerar) btnGenerar.disabled = false;
  }
}

function limpiarFormularioInvitaciones() {
  // Limpiar campos de configuración
  ["edicion-evento", "fecha-evento", "fecha-carta"].forEach((id) => {
    const el = document.getElementById(id);
    if (el) el.value = "";
  });

  // Limpiar archivos PDF
  ["file-plantilla-doc", "file-convocatoria", "file-cronograma"].forEach(
    (id) => {
      const el = document.getElementById(id);
      if (el) el.value = "";
    }
  );

  ["status-plantilla-doc", "status-convocatoria", "status-cronograma"].forEach(
    (id) => {
      const el = document.getElementById(id);
      if (el) {
        el.textContent = "Sin seleccionar";
        el.classList.remove("selected");
      }
    }
  );

  // Resetear estado
  invitacionesState = {
    archivos: {
      plantillaDoc: null,
      convocatoria: null,
      cronograma: null,
    },
    invitadosSeleccionados: [...invitadosData],
    zoomLevel: 100,
    previewIndex: 0,
  };

  // Actualizar preview
  actualizarPreview();
}

// Inicializar invitaciones cuando se cambia a esa página
const originalCambiarPagina = cambiarPagina;
cambiarPagina = function (nombrePagina) {
  originalCambiarPagina(nombrePagina);

  if (nombrePagina === "invitaciones") {
    setTimeout(() => {
      inicializarInvitaciones();
    }, 100);
  }
};
